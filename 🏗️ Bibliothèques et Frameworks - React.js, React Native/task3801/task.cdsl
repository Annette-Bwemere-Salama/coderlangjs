{
  "jsLectureId": 380,
  "reward": 10,
  "tutors": [
    "Sigma"
  ],
  "testEngine": "reactNative",
"runAs": "native",
  "i18n": {
    "en": {
      "title": "Vocabulary Builder app",
      "description": [
        "We will now jointly develop a full-fledged Vocabulary Builder mobile app.",
        "The application will allow you to create your own dictionary of English words.",
        "We use React Native, RN Navigation, Redux, redux-thunk, AsyncStorage in the application.",
        "It will be interesting!"
      ],
      "stages": {
        "1": [
          "Let's start with a little preparation. Add the fonts. First, install the `expo-font` library.",
          "All fonts have already been added to the `src/assets/fonts` folder. The `Roboto` fonts will be used in the project.",
          "Fonts must be loaded once. We will do this using the `useEffect` hook, which must be executed once.",
          "In an asynchronous function, call the `Font.loadAsync` asynchronous method with an array of Roboto fonts.",
          "Remember to import the fonts themselves. `Font` is a generic import from `expo-font`.",
          "While the fonts are loading, the `App` component should return the `ActivityIndicator` element with the size` small`.",
          "After the font load completes, the `App` component should display the standard expo message.",
          "Use the flag created with `useState` to track downloads."
        ],
        "2": [
          "Now let's add some starter code for the redux store.",
          "Install the `redux`, `react-redux` and `redux-thunk` libraries.",
          "In the `src/external/redux/constants.js` file  create three constants `ADD_LIST`, `LISTS`, `WORDS`.",
          "The meaning of each constant must be the same as its name.",
          "In the `src/external/redux/actions.js` file, you need to create and export the action creator `addList`",
          "This function must return an object with two fields: `type` and `payload`.",
          "The `type` field must be the `ADD_LIST` and` payload` must be the action creator argument.",
          "In the file `src/external/redux/helpers.js`, create the `addListResult` method, which will be the first argument to receive the state of the application, and the second - payload from the `addList` action.",
          "This method should return an updated state. Only the `LISTS` property should be updated.",
          "The `addListResult` must add a new object with the `key` field equal to the second argument of `addListResult`.",
          "The second field of this object must be `createAt`, equal to the result of calling `moment`.",
          "Use this method for the `reducer` in the `src/external/redux/store.js` file for the `ADD_LIST` case.",
          "The default storage should have 4 properties - `LISTS` and `WORDS` - empty arrays, `loading` - `false`, `error` - `null`.",
          "From the `src/external/redux/store.js` file, do not forget to export by default the creation of a store with the connected middleware `thunk`."
        ],
        "3": [
          "Let's add the navigator component in the file `src/components/Navigator/index.js`.",
          "Let's immediately add temporary components for our future screens.",
          "Let's place them in the `src/containers` folder: `Words/index.js`, `Lists/index.js`, `AddingListOrWord/index.js`.",
          "All components and containers must be named exactly the same as the folders in which they are located.",
          "Temporarily let all three containers return `null` ",
          "Don't forget to install all the libraries you need for navigation.",
          "Add the file `constants.js` to the project root, from which you export the constants `ADD_LIST_SCREEN`, `ADD_WORD_SCREEN`, `LISTS_SCREEN`,` WORDS_SCREEN`.",
          "Each constant must have a value equal to its name.",
          "The` Navigator` component should return a navigation container with a single-screen stack navigator.",
          "The header must be disabled on all screens, the initial screen must be `LISTS`.",
          "The only screen should be a screen named `LISTS`, displaying the component `src/container/Lists`."
        ],
        "4": [
          "Let's add a file with a list of colors that will be used in the project.",
          "From the `src/assets/styles/colors.js` file, export the default object.",
          "In this object, define the colors:` blue`: `#4D8ADA`, `blue1`: `#FAFCFF`, `blue2`: `#D5E2F2`, `blue3`: `#DEECFE`, `black`: `#1E1E1E`,",
          "`blackOpacity80`: `rgba(30, 30, 30, 0.8)`, `blackOpacity20`: `rgba(30, 30, 30, 0.2) `, `white`: `white`, `red`: `#EE6161`.",
          "Let's add an icon component: `src/components/Icon/index.js`. For this we will use the `@expo/vector-icons` library.",
          "Import the `createIconSetFromFontello` method and call it to get the vector icon component.",
          "It is this component that needs to be returned from the` Icon` component by passing the props `name`,` size`, `color` into it.",
          "When calling the `createIconSetFromFontello` method, pass the first argument - `fontelloConfig` from `src/assets/fonts/fontIcon/config.json`.",
          "Pass the string `fonticons` as the second argument."
        ],
        "5": [
          "Let's add the component `src/components/Buttons/RadialButton`.",
          "This component must return a` TouchableOpacity` element that wraps the `Icon` component.",
          "The `onPress` property must be forwarded to `TouchableOpacity`.",
          "Pass the following properties to the` Icon` component: `size` - `35`, `color` -` colors.white`, `name` -` plus`.",
          "The `TouchableOpacity` styles should be the following: `height`: `55`, `width`: `55`, `maxHeight`: `55`, `maxWidth`: `55`, `backgroundColor`: `colors.blue`,",
          "`shadowColor`: `colors.blue`, `justifyContent`: `center`, `alignItems`: `center`, `borderRadius`: `27.5`, `shadowOpacity`: `0.4`, `shadowRadius`: `10`,",
          "`elevation`: 4, `position`: `absolute`, `borderWidth`: `0`, `bottom`: `0`, `right`: `29`, `opacity`: `1`."
        ],
        "6": [
          "Let's add the `src/components/NavigationHeader` component. This component should return the `StatusBar` element.",
          "`NavigationHeader` should have default properties: `barStyle`: `dark`, `backgroundColor`: `transparent`.",
          "The `StatusBar` must have `animated` and `translucent` properties equal to `true`.",
          "The `StatusBar` property of `backgroundColor` must be forwarded from the `NavigationHeader` properties.",
          "The `StatusBar` property of `barStyle` must be `-content` with a prefix equal to the `barStyle` property of `NavigationHeader`."
        ],
        "7": [
          "Let's work on the `Lists` screen. It should return a snippet with two `SafeAreaView` elements.",
          "The first one should have styles: `flex`: `1`, `backgroundColor` - `colors.blue`.",
          "Second: `flex`: `0`, `backgroundColor`: `colors.blue1`.",
          "Further, all elements will be added inside the first` SafeAreaView`. ",
          "The first will be the` NavigationHeader` component with the `barStyle` property equal to` light`. ",
          "After it add a `View` element with styles: `flex` -` 0.5`, `paddingBottom` - `25`, `paddingLeft` - `20`.",
          "Let's call this the `View` header. Inside the header, add another `View` - an info block.",
          "Info block styles - `flex` - `1`, `flexDirection` - `row`,` height` - `40`,` maxHeight` - `40`.",
          "Inside the info block, add two `View` (list block and word block) with two `Text` elements each (count and label).",
          "Block styles list - `width` - `66`, `alignItems` - `center`, `justifyContent`: `center`.",
          "Word block styles - `width` - `81`, `alignItems` - `center`, `justifyContent`: `center`, `borderLeftWidth`: `2`, `borderColor`: `colors.white`.",
          "The styles of the first text element of each list and word block are: `fontSize` - `22`, `color` - `colors.white`, `fontFamily` - `RobotoBold`.",
          "The styles of the second text element of each list and word block are: `fontSize` - `12`, `color` - `colors.blue2`,` fontFamily` - `RobotoRegular`.",
          "The first label should display the text `Lists`, the second one should display the text `Words`.",
          "After the header, add the screen body - a `View` element with styles: `flex` -` 8`, `backgroundColor` - `colors.blue1`, `borderTopLeftRadius` - `15`, `borderTopRightRadius` -` 15`. ",
          "The first child must be the text `My dictionary` with the following styles: ",
          "`fontSize` - `20`, `color` - `colors.black`, `fontFamily` - `RobotoRegular`, `marginTop` - `26`, `marginLeft` - `16`.",
          "This text should be followed by a `FlatList` element with the style `marginVertical` -` 21`. ",
          "And after the `FlatList` add the `RadialButton` component."
        ],
        "8": [
          "Let's connect redux and navigation to our application",
          "To do this, import the `src/components/Navigator` component and the `Provider` component from` react-redux`. ",
          "Now, after the fonts are loaded in the `<App />` component, the navigator wrapped by the provider should be returned.",
          "The provider needs to specify the `store` property, the value of which is imported from `src/external/redux/store.js`.",
          "Now the `Lists` component needs to be connected to the store. To do this, import `connect` from `react-redux` in the `src/containers/Lists.index` file.",
          "The `connect` method must have only one argument, the `mapStateToProps` function.",
          "`mapStateToProps` must return an object with three fields `lists`, `wordsCount`, `listsCount`.",
          "Pass the `Lists` component to the function returned by the `connect` method.",
          "The `lists` field must contain the `LISTS` field from the repository state.",
          "The fields `wordsCount`, `listsCount` are the length of the `WORDS` and `LISTS` arrays from the storage state.",
          "The text element above the `Lists` text in the `Lists` component should display the `listsCount` property.",
          "The text element above the `Words` text in the `Lists` component must display the `wordsCount` property."
        ],
        "9": [
          "Let's add the remaining screens to the navigator. There should be 4 of them in total.",
          "Let's add a screen with the `Words` component and the name `WORDS_SCREEN`.",
          "And add two more screens with the `AddingListOrWord` component.",
          "One named `ADD_LIST_SCREEN` and one named `ADD_WORD_SCREEN`.",
          "Well, let's add a transition to the `ADD_LIST_SCREEN` screen.",
          "On the `Lists` screen, when we click on the `RadialButton`, we should get to the `ADD_LIST_SCREEN` screen."
        ],
        "10": [
          "Let's add the `src/components/Buttons/IconButton` component.",
          "This component must return the `TouchableOpacity` element.",
          "The styles for this component must be an array of styles.",
          "The first element of the array must contain a `padding` style of 3.",
          "The second element in the array is the passed `style` property, which is an empty object by default.",
          "The onPress property of the component must be forwarded to `TouchableOpacity`.",
          "Inside the `TouchableOpacity` add the `Icon` component. Pass the `name`, `size`and `color` properties into it."
        ],
        "11": [
          "Let's add the `src/components/Input` component.",
          "This component must be returned by the `View` element.",
          "The styles for this component must be an array of styles.",
          "The first element of the array must contain the following styles: `borderRadius` - `4`, `height` - `35`, `flex` - `1`,",
          "`paddingLeft` - `10`, `backgroundColor` - `colors.white`, `shadowOpacity` - `0.4`, `shadowRadius` - `3`,",
          "`shadowOffset` - `{width: 0, height: 1}`, `shadowColor` - `colors.black`, `elevation` - `3`, `borderWidth` - `0`.",
          "The second element in the array is the passed `style` property, which is an empty object by default.",
          "Inside the `TouchableOpacity` add a `TextInput` element with the following styles:",
          "`flex` - `1`, `color` - `colors.black`, `justifyContent` - `center`, `fontFamily` - `RobotoRegular`, `fontSize` - `18`.",
          "Pass in `TextInput` the properties `placeholder`, `onChangeText` and `value`."
        ],
        "12": [
          "Let's add the `src/components/Buttons/Button` component.",
          "This component should return the `TouchableOpacity` element with styles:",
          "`borderRadius` - `4`, `height` - `35`, `width` - `120`, `justifyContent` - `center`,",
          "`alignItems` - `center, `backgroundColor` - `colors.blue3`, `shadowOpacity` - `0.4`,",
          "`shadowRadius` - `3`, `shadowOffset` - `{width: 0, height: 1}`, `shadowColor` - `colors.blue`,",
          "`elevation` - `3`, `borderWidth` - `0`.",
          "The `onPress` property of the component must be forwarded to `TouchableOpacity`.",
          "If the `loading` property is `true`, there must be the `ActivityIndicator` inside the `TouchableOpacity`.",
          "For ActivityIndicator, set the `size` property to `small`, and `color` to `colors.blue`.",
          "If the `loading` property is `false`, there must be `Text` inside the `TouchableOpacity`.",
          "The `Text` should display the `text` property, with the color `colors.blue`.",
          "The `TouchableOpacity` must be disabled when `loading` is `true`."
        ],
        "13": [
          "Now let's add a component that will be an element of the `Lists`.",
          "Let's add it to the `src/containers/Lists/List` folder.",
          "First, let's add the `getWordsCount` helper method in the `src/containers/Lists/List/helpers.js` file.",
          "This method will receive a list of words as the first argument, and the name of the list as the second.",
          "It should return the number of words for which the `listKey` field is equal to the passed list name.",
          "The `List` component should return `TouchableOpacity` with styles: `backgroundColor` - `colors.white`,",
          " flexDirection` - `row`, `height` - `55`, `borderRadius` - `5`, `marginVertical` - `7`, `marginHorizontal` - `16`,",
          "`paddingHorizontal` - 10, `shadowOpacity` - 0.4, `shadowRadius` - `3`, `shadowOffset` - `{width: 0, height: 1}`,",
          "`shadowColor` - `colors.black`, `elevation` - `3`, `borderWidth` - `0`.",
          "A `TouchableOpacity` must have two `View` children, a left and a right side.",
          "The left one with styles `flex` is `8`, `justifyContent` is `center` and two children are `Text`. ",
          "The first `Text` should display the `listKey` property with styles: `fontSize` - `16`, `color` - `colors.black`,` fontFamily` - `RobotoRegular`.",
          "The second `Text` should display the moment of the `createAt` property in the format `DD.MM.YYYY`. Styles: ",
          "`fontSize` - `10`, `color` - `colors.blackOpacity80`, `fontFamily` - `RobotoRegular`, `fontWeight` - `300`, `marginTop` - `4`.",
          "Styles for the right side: `flex` - `8`, `flexDirection` - `row`, `justifyContent` - `flex-end`, `alignItems` - `center`,",
          "The first element on the right is the `Icon` component with the properties `name` -`pencil` and `color` - `colors.blue`. ",
          "The second element on the right is the text that displays the result of calling `getWordsCount` with the properties `words` and `listKey`. ",
          "The styles of this part are `fontSize` - `15`, `color` - `colors.blue`, `fontFamily` - `RobotoRegular`, `marginLeft` - `6`."
        ],
        "14": [
          "The `FlatList` element of the `Lists` container must have the `data` and `renderItem` properties defined to display the list items.",
          "The `data` property must equal the `lists` property of the container.",
          "And the `renderItem` method must return a List component with the `createdAt` and `listKey` properties.",
          "The values of these properties are the `key` and `createdAt` fields of the list item.",
          "And in the `List` component, add a transition to the `WORDS_SCREEN` screen by pressing on the `TouchableOpacity`.",
          "The second argument to the `navigation.navigate` method in this case should be the `listKey` property of the component."
        ],
        "15": [
          "Let's connect the `List` component to the repository.",
          "You only need to transfer the `WORDS` field to the `List` component.",
          "Only when passing it to a component should it be renamed to `words`."
        ],
        "16": [
          "Let's work on the `AddingListOrWord` container.",
          "This screen will have one input field, and the entered value will need to be stored somewhere.",
          "Use `useState` for this.",
          "The `AddingListOrWord` container itself must return a `SafeAreaView` with styles:",
          "`flex` - 1, `backgroundColor` - `colors.blue1`.",
          "The first child of `AddingListOrWord` must be a `NavigationHeader` component.",
          "The second child must be the `View` element. This will be the header.",
          "Header styles: `flexDirection` - `row`, `alignItems` - `center`, `marginTop`: `18`, `paddingLeft` - `12`.",
          "Inside the header there must be an `IconButton` component, when clicked, the `goBack ` method should be called.",
          "The `size` property of `IconButton` must be `23`, `name` - `cancel-circle`.",
          "The `IconButton` must be followed by a title made with the `Text` element. Its styles are:",
          "`color`: `colors.black`, `fontSize`: `18`, `fontFamily`: `RobotoRegular`, `marginLeft`: `12`.",
          "Inside the title, there must be an `Add list` text for a screen named `ADD_LIST_SCREEN`.",
          "For a screen named `ADD_WORD_SCREEN`, the internal title test must be `Add word`.",
          "After the title, add a screen body - a `View` element with a `flex` style of `1`.",
          "Inside it must be an input field container - a `View` element with styles:",
          "`marginTop` - `29`, `paddingHorizontal` - `15`, `flexDirection` - `row`.",
          "The input field container consists of two elements - the `Input` component and the `Button` component.",
          "The value of the input field must equal the state values ​​we have already created, and it must be changed in the `onChangeText` property.",
          "`placeholder` field must have `enter list name` for `ADD_LIST_SCREEN` and `enter word name` for `ADD_WORD_SCREEN` screens.",
          "The `autoFocus` property of the input field must be `true`, and the styles: `marginRight` - `14`.",
          "The `text` of the `Button` component must be equal to `Add`, and the `loading` property is forwarded from the container properties.",
          "If the container has a defined` error` property, it should be displayed inside the `Text` element after the screen body.",
          "Its styles are: `color` - `colors.red`, `fontFamily` - `RobotoBold`, `fontSize` - `14`, `textAlign` - `center`, `marginTop` - `33`."
        ],
        "17": [
          "Let's work on the `Words` container, which should return two `SafeAreaView` items.",
          "The first with styles: `flex` - `1`,`backgroundColor` - `colors.blue1`, and the second: `flex` - `0`, `backgroundColor` - `colors.blue1`.",
          "Further, all items will be added to the first` SafeAreaView`.",
          "First, add a `NavigationHeader`. After that, the header - the `View` with two child buttons, `TouchableOpacity`, back and delete.",
          "Header styles are: `backgroundColor` - `colors.blue1`, `height` - `50`, `flexDirection` - `row`, `justifyContent` - `space-between`,",
          "`alignItems` - `center`, `paddingHorizontal` - `26`.",
          "Back button styles are: `flex` - `8`, `flexDirection` - `row`, `alignItems` - `center`. Clicking on it should trigger the `navigation.goBack` method. ",
          "Delete button styles are : `flex` - `2`, `justifyContent` - `center`, `alignItems`: `flex-end`.",
          "Inside the back button add an` Icon` component with properties `color` -` colors.black`, `size` -` 20` and `name` -` left-open-big`.",
          "After the icon there should be a `route.params` text  with styles: `fontSize` - `18`,",
          "`color` - `colors.black`, `fontFamily`: `RobotoRegular`,` marginLeft`: `14`.",
          "Inside the delete button add the `Icon` component with the properties `color` - `colors.black`, `size` - `20` and `name` - `trash`.",
          "After the header add a `FlatList` element whose `keyExtractor` will return the element's `wordset_id` property.",
          "After the list add the component` RadialButton`, when you click on it, you will go to the screen `ADD_WORD_SCREEN`.",
          "When passing, you must add the `listKey` parameter equal to `route.params`."
        ],
        "18": [
          "Let's work on the redux methods. But first, let's add the required constants to the `src/external/redux/constants` file.",
          "`API`, `FETCH_WORD_ENDPOINT`, `ADD_WORD`, `SET_ERROR`, `SET_LOADING` - the value of all constants is equal to their name.",
          "And then add the export of the `getFetchWordEndpoint` function to the `src/external/redux/helpers` file.",
          "This function must take one argument - the word to search for.",
          "It will return the request url, which consists of `API` and `FETCH_WORD_ENDPOINT` constants.",
          "These two variables need to add a get parameter `s` equal to the function argument",
          "Export three more functions from `src/external/redux/actions`: `addWord`, `setError` and `setLoading`.",
          "Each must return an object with fields `type` and `payload`.",
          "The `type` field is equal to the constants `ADD_WORD`,` SET_ERROR` and `SET_LOADING`, respectively.",
          "For the `setError` and `setLoading` functions,` payload` equals the single argument of each function, respectively. ",
          "The `addWord` function has `payload` all fields of the first argument, padded with the `listKey` field, equal to the second argument of the function."
        ],
        "19": [
          "The data needs to be stored somewhere. To do this, let's use the `@react-native-async-storage/async-storage` library.",
          "Let's write two functions to save and read data in the `functions.js` file at the root of the project.",
          "Let's call these functions `setStorage` for saving and `readStorage` for reading.",
          "`setStorage` takes two arguments - the data key and the data itself. ",
          "The data in `async-storage` must be stored as a JSON string under the passed key using the `setItem` method.",
          "`readStorage` must read a method from `async-storage` by the key passed to it using the `getItem` method.",
          "If there is no data, let's return `null`.",
          "Remember - both methods must be asynchronous and wait for `setItem` or `getItem` to execute."
        ],
        "20": [
          "Let's add the required constants to the file `src/external/redux/constants`.",
          "`DELETE_LIST`, `DELETE_WORD` - the value of all constants is equal to their name.",
          "Export two more functions from `src/external/redux/actions`: `deleteWord`, `deleteList`.",
          "Each must return an object with fields `type` and `payload`.",
          "The `type` field is equal to the constants `DELETE_WORD` and `DELETE_LIST`, respectively.",
          "`payload` equals a single argument to each function, respectively.",
          "In the same place we will add a request method `fetchWord` with three arguments: the word to search for, `listKey` and the object `navigation`.",
          "This method must return an asynchronous function with one `dispatch` argument.",
          "First dispatch the action for the `loading` field with the value `true`.",
          "Then we make a request using fetch, the url of which is obtained from the `getFetchWordEndpoint` method.",
          "If the answer is no error, dispatch the addWord action with the result of the response and `listKey`, dispatch `setError` with the argument `null` and call the method `navigation.goBack`.",
          "If the response is an error, dispatch the `setError` action with this error.",
          "Always dispatch` setLoading` with the value `false` at the end."
        ],
        "21": [
          "Add the constant `SET_STORAGE_DATA` to `src/external/redux/constants`, equal to its name.",
          "Add the `readAsyncStorage` function to the `src/external/redux/actions` file and export it.",
          "This method should return an asynchronous function with one `dispatch` argument.",
          "In the closure, we first read the data for the keys `LISTS` and `WORDS` using `readStorage`.",
          "Then you need to dispatch the action with `SET_STORAGE_DATA` `type`.",
          "`payload` must be an object with `LISTS` and `WORDS` fields equal to the data read.",
          "If there is no data, specify an empty array."
        ],
        "22": [
          "Functions `deletelistresult`, `deletewordresult`, `addlistresult`, `addwordresult` should be exported from the `src/external/redux/helpers` file.",
          "`deleteListResult` must get a state and list to delete as arguments.",
          "This method must return the updated state, filtering the lists `LISTS` and `WORDS`.",
          "`LISTS` must be filtered by the element's `key` property, `WORDS` - by `listKey`.",
          "`deleteWordResult` should receive a state and word for removal as arguments.",
          "This method must return the updated state by filtering the `WORDS` list on the element's `word` field.",
          "The `addListResult` must get a state and list to add as arguments.",
          "If the list already exists, you need to update only the error field - `There is already a list with this name`.",
          "If the list name is not or it is an empty string - the error is `List name is empty`.",
          "The `addWordResult` method should receive a state and word object  to add as arguments.",
          "If the word in the `word` property already exists in the list - the error is `This word is already there`.",
          "Also update the `LISTS` And `WORDS` values in Async Storage for each change."
        ],
        "23": [
          "Improve the reducer. By default, it must return the initial state.",
          "The case `ADD_LIST` should call the `addListResult` method, the case` ADD_WORD`: `addWordResult`.",
          "Cases` DELETE_LIST` and `DELETE_WORD` - `deleteListResult` and `deleteWordResult`, respectively.",
          "At the same time, you always need to return the result of the call of the method with the corresponding arguments.",
          "Cases `SET_ERROR` And `SET_LOADING` should save passed `payload` in the field `error` or `loading`, respectively.",
          "When `SET_STORAGE_DATA`, you need to merge the `payload` to the copy of the state."
        ],
        "24": [
          "You need to create folders: `src/containers/Words/Word`, `src/containers/Words/Word/Details`, `src/containers/Words/Word/Option`.",
          "In each bottom, you need `index.js` file to create the appropriate components. ",
          "Let's start with the `Option` component. It must return the `Text` element.",
          "If the `detailsKey` property is not equal to `examples` or `defs`:",
          "- element styles: `fontSize` - `14`, `color` - `colors.black`, `fontFamily` - `RobotoRegular`,` textDecorationLine`: `underline`;",
          "- internal text - the `option` property of the component;",
          "- at the end of the internal test `, `, if the `lastOption` property does not equal `true`.",
          "",
          "In another case, the display logic will be somewhat different.",
          "To do this, in the `Option`'s folder create the `helpers.js` file and export it from the `optionTransform` function.",
          "This function takes two arguments: strings `option` and `word`. `option` must be broken into an array.",
          "The partition should be in such a way that every entry of the `word` in the `option` was separate item.",
          "After you need every `word` entry in this array wrap the element into the `Text` element with `fontFamily` - `RobotoBold`",
          "",
          "If the` DetailsKey property` More` Examples` Or `Defs`:",
          "- element styles: `fontSize` - `14`,` color` - `colors.black`,` fontFamily` - `RobotoRegular`;",
          "- internal text - the result of calling `optionTransform` with the `option` and `word` properties of the component;",
          "- before the internal text you need to add `- `."
        ],
        "25": [
          "Now let's work on the `Details` component. It should return the `View` element.",
          "For `View`, the `marginVertical` property must be `10`.",
          "Inside the `View`, first add a `Text` element: for the `detailsKey` value `defs` - the inner text is `Definition:`,",
          "for the value `examples` - `Example:`, for the value `synonyms` - `Synonyms:`.",
          "Text styles: `fontSize` - `14`,` color` - `colors.black`, `fontFamily` - `RobotoBold`.",
          "There must be a `View` element after the text.",
          "For `detailsKey` equal to `synonyms`, this` View` must display the elements on a line with a wrap.",
          "Within this element, display the `options` array. For each element, show the `Option` component.",
          "Each `Option` component must be passed an `option` property equal to the current element.",
          "Also, in each` Option`, you need to pass `word` and` detailsKey` properties. ",
          "The `lastOption` property of the `Option` must be `true` for the last item in the `options` array."
        ],
        "26": [
          "Now is the time to work on the `Word` component. It will expand and collapse word details.",
          "To do this, add a flag using the `useState` hook. The initial value is `false`.",
          "",
          "The `Word` component must return a `View` element, inside which there will be a `TouchableOpacity` with styles:",
          "`height` - 53, `flexDirection` - `row`, `justifyContent` - `space-between`, `alignItems` - ` center`, `marginVertical` - `7`, ",
          "`backgroundColor` - `colors.white`, `borderRadius` - `5`, `paddingHorizontal` - `17`, `borderWidth` - `0`, `shadowOpacity` - `0.4`,",
          "`shadowOffset` - `{width: 0, height: 1}`, `shadowColor` - ` colors.black`, `elevation` - ` 3`, `marginHorizontal` - ` 16`, `shadowRadius` - 3.",
          "When clicking on `TouchableOpacity`, the flag should toggle to the opposite value",
          "",
          "The first child of the `TouchableOpacity` must be a `Text`, which outputs the `word` property.",
          "Its styles are: `fontSize` - `16`, `color` - `colors.blackOpacity80`, `fontFamily` - `RobotoRegular`.",
          "",
          "The second child of the `TouchableOpacity` must be the `View` icon container.",
          "Its styles are: `flexDirection` - `row`, `justifyContent` - `space-between`, `alignItems` - `center`.",
          "Icon group consists of two `IconButton` components with properties `size` -` 20`, `color` - `colors.blue` and `style.marginLeft` -` 19` ",
          "",
          "When clicking on the first flag, it should switch to the opposite value",
          "If the flag is `true` - `name` the first `IconButton` must be `up-open-big`, otherwise - `down-open-big`",
          "",
          "The second `IconButton` must have a `name` property `trash`.",
          "The `dispatchDeleteWord` property must be forwarded to `onPress` by the second` IconButton`.",
          "We will connect it in the next steps.",
          "",
          "After `TouchableOpacity`, show `View` if the flag is `true`.",
          "We'll show the word details here. The `marginHorizontal` should be `33`."
        ],
        "27": [
          "To display the data, you must first prepare.",
          "To do this, export the `preparedDetails` function from the file: `src/containers/Words/Word/helpers.js`.",
          "",
          "This function must receive one `meanings` argument.",
          "`meanings` is an array of objects that describe a word.",
          "Each object consists of the strings `def`, `example` and an array of strings `synonyms`.",
          "",
          "When receiving such an array, the `preparedDetails` function should return an object with the following fields: `defs`,` examples`, `synonyms`.",
          "`defs` must be an array of `def` field values ​​of all `meanings` elements.",
          "`examples` must be an array of `example` field values ​​of all `meanings` elements.",
          "`synonyms` must union the `synonyms` arrays of all `meanings` elements.",
          "The values ​​for `defs`, `examples` and `synonyms` must be unique.",
          "",
          "The details container in a `Word` component should display an array of `preparedDetails` fields.",
          "This method must be called with the `meanings` property of the `Word` component.",
          "For each key, the `Details` component should be rendered with the `keyDetail` property equal to the current key.",
          "The `options` property must equal the value of this key in the object obtained from `preparedDetails`.",
          "The `word` property must also be passed through.",
          "",
          "In the `Words` container, specify the `data` property for the `FlatList`.",
          "It must equal the filtered `words` property.",
          "Only those elements should remain whose `listKey` property is equal to the `route.param` of the container."
        ],
        "28": [
          "We need to add one more, this time the last, component.",
          "Let's create it in the `src/components/AlertModal` folder.",
          "This component must return the `Modal` element. ",
          "The `visible` property should be cast into it, and the `handleClose` property should be passed into its `onRequestClose` property.",
          "The modal should appear from bottom to top and the background should be transparent.",
          "",
          "Inside the `Modal` element add a `Pressable` element with styles:",
          "`flex` - `1`, `alignItems`: `center`, `justifyContent` - `center`.",
          "The `handleClose` property must be passed to its `onPress` property.",
          "",
          "Inside a `Pressable` there should be only one `View` element with styles:",
          "`alignItems` - `center`, `backgroundColor` - `colors.white`, `borderRadius`- 5,",
          "`elevation` - `5`, `margin` - `20`, `padding` - `35`, `shadowColor` - `colors.black`,",
          "`shadowOffset` - `{width: 0, height: 2}`, `shadowOpacity` - `0.25`, `shadowRadius` - `3.84`. ",
          "",
          "Inside this `View`, we need to add another `View` - the container for the close button.",
          "Its styles are: `position` - `absolute`, `width` - `50`, `height` - `50`, `top` - `-15`,",
          "`right` - `-15`, `justifyContent` - `center`, `alignItems` - `center`.",
          "Inside this `View` there is only one `IconButton` component with properties:",
          "`color` - `colors.blue`, `name` - `cancel-circle`, `size` - `35`",
          "The `handleClose` property must be passed to its `onPress` property.",
          "",
          "After the container of the close button, add the title `Text`. ",
          "The `title` property must be inside this text. Its styles are: ",
          "`fontSize` - `18`, `color` - `colors.black`, `fontFamily` - `RobotoRegular`,",
          "`marginBottom` - `15`, `textAlign` - `center`.",
          "",
          "Under the heading add `TouchableOpacity` with the `Delete` text.",
          "Button styles: `backgroundColor` - `colors.blue`, `borderRadius`: `5`, `elevation`: `2`, `padding`: `10`.",
          "Text styles: `fontSize` - `17`, `color` - `colors.white`, `fontFamily` - `RobotoBold`, `textTransform` - `uppercase`, `textAlign`: `center`.",
          "The `handleDeleteClick` property must be passed into the `onPress` method of this `TouchableOpacity`."
        ],
        "29": [
          "Let's add a modal window to the `Words` container.",
          "First, let's add the logic to enable it.",
          "Let's create its state with `useState`. The initial value is an object with fields:",
          "`visible` with the value `false`,` title` is an empty string, `handleDelete` is null.",
          "Next, add the `getVisibleModalData` method in the file: `src/containers/Words/helpers.js`.",
          "",
          "The method must have three arguments: `name`, `deleteHandler`, `setModalParams`.",
          "The last one is the method from the `useState` called above.",
          "This function should call the `setModalParams` method and pass an object with fields to it:",
          "-`visible` equal to `true`;",
          "-`title` equal to `Are you sure you want to delete \"${name}\"?`, where name is the argument described above ",
          "-`handleDelete` equal to the function that first calls `deleteHandler` with the argument `name`, and then `setModalParams` with the initial value of `useState`. ",
          "",
          "The `AlertModal` component itself must be added after the `RadialButton`.",
          "The properties `visible`, `title`, `handleDeleteClick` must be taken from the state object above. ",
          "The `handleClose` property must set the initial value of `useState`."
        ],
        "30": [
          "The `Words` container needs to be connected to the store using the `connect` method.",
          "We will use both `mapStateToProps` and `mapDispatchToProps`.",
          "`mapStateToProps` should only return one `words` property equal to the `WORDS` from the state. ",
          "`mapDispatchToProps` must be an object with properties: `dispatchDeleteList` and `dispatchDeleteWord`. ",
          "The first is equal to the `deleteList` method, the second is `deleteWord`.",
          "",
          "The second `TouchableOpacity` in the `Words` container should show the modal.",
          "Use the `getVisibleModalData` method for this.",
          "The first argument is` route.params`.",
          "The second argument should delete the passed list using the `dispatchDeleteList` property and then go to the `LISTS_SCREEN` screen.",
          "The third argument is a method from `useState`. ",
          "",
          "The `FlatList` must have a `renderItem` property that returns the` Word` component. ",
          "Just expand the` item` property of the `renderItem` argument into the properties of the `Word` component.",
          "The `dispatchDeleteWord` property of the `Word` component must be a function that calls `getVisibleModalData`.",
          "The first argument is the `item.word` property of the `renderItem` argument.",
          "The second `dispatchDeleteWord` from the `Words` properties.",
          "The third argument is a method from `useState`. "
        ],
        "31": [
          "The `AddingListOrWord` container must be connected to the store using the `connect` method.",
          "We will use both `mapStateToProps` and `mapDispatchToProps`.",
          "`mapStateToProps` must return two `loading` and `error` properties from the state.",
          "`mapDispatchToProps` must return an object with three properties: `dispatchAddList`, `dispatchFetchWord`, `dispatchClearError`.",
          "Their values ​​are `addList`, `fetchWord` and` setError` respectively.",
          "",
          "When clicking on the `Add` button, the value of the input field should be cleared.",
          "When clicking the` Add` button for the `ADD_WORD_SCREEN` screen, the `dispatchFetchWord` method should be called.",
          "In this case, its first argument must be the value of the input field before clearing, with spaces removed at the edges in lower case.",
          "Remember to pass the second and third arguments: `route.params.listKey` and `navigation`.",
          "",
          "When you click the `Add` button for the `ADD_LIST_SCREEN` screen, call the `dispatchAddList` method.",
          "In this case, its only argument should be the value of the input field before clearing, with spaces removed at the edges.",
          "",
          "When entering text into a field, the `dispatchClearError` method must be called with a `null` argument.",
          "That said, everything else should work as before.",
          "Also, this method with the same value should be called when the back button is pressed (cancel icon).",
          "After cleaning up, call the `navigation.goBack()` method."
        ],
        "32": [
          "The final touch is loading data between inclusions.",
          "In the file` App.js`, add a call to the `store.dispatch` method before loading the fonts.",
          "`store` we imported earlier and passed it to the provider.",
          "The only argument to the `store.dispatch` method will be  the `readAsyncStorage` method call."
        ]
      },
      "final": [
        "It has been a long journey, but you have overcome it. You can be proud of yourself!"
      ]
    },
    "ru": {
      "title": "Приложение Vocabulary Builder",
      "description": [
        "Теперь мы вместе разработаем полноценное мобильное приложения  Vocabulary Builder.",
        "Приложение позволит создавать собственный словарик английских слов.",
        "В приложении мы используем React Native, RN Navigation, Redux, redux-thunk, AsyncStorage.",
        "Будет интересно!"
      ],
      "stages": {
        "1": [
          "Начнем с небольшой подготовки. Добавь шрифты. Для начала установи библиотеку `expo-font`.",
          "Все шрифты уже добавлены в папку `src/assets/fonts`. Использовать в проекте будет шрифты `Roboto`.",
          "Шрифты должны загружаться один раз. Делать будем это с помощью хука `useEffect`, который должен выполняться один раз.",
          "В асинхронной функции вызови асинхронный метод `Font.loadAsync`, передав в него массив из шрифтов Roboto.",
          "Не забудь сами шрифты импортировать. `Font` это общий импорт из `expo-font`.",
          "Пока шрифты грузятся, компонент `App` должен возвращать элемент `ActivityIndicator` с размером `small`.",
          "После завершение загрузки шрифтов компонент `App` должен отобразить стандартное сообщение expo.",
          "Для отслеживания загрузки используй флаг созданный с помощью `useState`"
        ],
        "2": [
          "Теперь добавим немного начального кода для хранилища redux.",
          "Установи библиотеки `redux`, `react-redux` и `redux-thunk`.",
          "В файле `src/external/redux/constants.js` создай три константы `ADD_LIST`, `LISTS`, `WORDS`.",
          "Значение каждой константы должно быть такое же, как и ее название.",
          "В файле `src/external/redux/actions.js` нужно создать и экспортировать action creator `addList`",
          "Эта функция должна возвращать объект с двумя полями: `type` и `payload`.",
          "Поле `type` должно равняться `ADD_LIST`, а `payload` - аргументу action creator.",
          "В файле `src/external/redux/helpers.js` создай метод `addListResult`, который будет первым аргументом получать состояние приложение, а вторым - payload из `addList` action.",
          "Этот метод должен вернуть обновленное состояние. Обновляться должно только свойство LISTS.",
          "`addListResult` должен добавить новый объект с полем `key`, равным второму аргументу `addListResult`.",
          "Вторым полем этого объекта должно быть `createAt`, равное результату вызова `moment`.",
          "Этот метод используй для `reducer` в файле `src/external/redux/store.js` для `ADD_LIST` case.",
          "Хранилище по умолчанию должно иметь 4 свойства - `LISTS` и `WORDS` - пустые массивы, `loading` - `false`, `error` - `null`.",
          "Из файла `src/external/redux/store.js` не забудь экспортировать по умолчанию создание хранилища с подключенным middleware `thunk`."
        ],
        "3": [
          "Добавим компонент навигатора в файле `src/components/Navigator/index.js`.",
          "Сразу добавим временные компоненты для наших будущих экраном.",
          "Разместим их в папке `src/containers`: `Words/index.js`, `Lists/index.js`, `AddingListOrWord/index.js`.",
          "Все компоненты и контейнеры надо называть точно также, как папки в которых они находятся.",
          "Временно пусть все три контейнера возвращают `null`",
          "Не забудь установить все нужные библиотеки для навигации.",
          "Добавь в корне проекта файл `constants.js`, из которого экспортируй константы `ADD_LIST_SCREEN`, `ADD_WORD_SCREEN`, `LISTS_SCREEN`, `WORDS_SCREEN`.",
          "Каждая константа должна иметь значение, равное ее имени.",
          "Компонент `Navigator` должен возвращать контейнер навигации со stack навигатором с одним экраном.",
          "На всех экран должен быть отключен хедер, начальным экраном должен быть `LISTS`",
          "Единственным экраном должен быть экран с именем `LISTS`, отображающим компонент `src/container/Lists`"
        ],
        "4": [
          "Добавим файл с перечнем цветов, которые будут использоваться в проекте.",
          "Из файла `src/assets/styles/colors.js` экспортируй по умолчанию объект.",
          "В этом объекте определи цвета: `blue`: `#4D8ADA`, `blue1`: `#FAFCFF`, `blue2`: `#D5E2F2`, `blue3`: `#DEECFE`, `black`: `#1E1E1E`,",
          "`blackOpacity80`: `rgba(30, 30, 30, 0.8)`, `blackOpacity20`: `rgba(30, 30, 30, 0.2)`, `white`: `white`,`red`: `#EE6161`.",
          "Добавим компонент иконки: `src/components/Icon/index.js`. Для этого используем библиотеку `@expo/vector-icons`.",
          "Импортируем метод `createIconSetFromFontello` и вызовем его, что бы получить компонент векторной иконки.",
          "Именно этот компонент и надо вернуть из компонента `Icon`, пробросив в него пропсы `name`, `size`, `color`.",
          "При вызове метода `createIconSetFromFontello` передай первый аргумент - `fontelloConfig` из `src/assets/fonts/fontIcon/config.json`.",
          "Вторым аргументом передай строку `fonticons`."
        ],
        "5": [
          "Добавим компонент `src/components/Buttons/RadialButton`.",
          "Этот компонент должен возвращать элемент `TouchableOpacity`, который оборачивает компонент `Icon`",
          "Свойство `onPress` должно быть проброшено в `TouchableOpacity`.",
          "Компоненту `Icon` передай следующие свойства: `size` - `35`, `color` - `colors.white`,  `name` - `plus`.",
          "Стили `TouchableOpacity` должны быть следующие: `height`: `55`, `width`: `55`, `maxHeight`: `55`, `maxWidth`: `55`, `backgroundColor`: `colors.blue`,",
          "`shadowColor`: `colors.blue`, `justifyContent`: `center`, `alignItems`: `center`, `borderRadius`: `27.5`, `shadowOpacity`: `0.4`, `shadowRadius`: `10`,",
          "`elevation`: `4`, `position`: `absolute`, `borderWidth`: `0`, `bottom`: `0`, `right`: `29`, `opacity`: `1`."
        ],
        "6": [
          "Добавим компонент `src/components/NavigationHeader`. Это компонент должен возвращаться элемент `StatusBar`.",
          "У `NavigationHeader` должны быть свойства по умолчанию: `barStyle`: `dark`, `backgroundColor`: `transparent`.",
          "У `StatusBar` должны быть свойства `animated` и `translucent` равные `true`.",
          "Свойство `StatusBar` `backgroundColor` должно быть проброшено из свойств `NavigationHeader`.",
          "Свойство `StatusBar` `barStyle` должно быть `-content` с префиксом, равным свойству `barStyle` `NavigationHeader`."
        ],
        "7": [
          "Проработаем экран `Lists`. Он должен возвращать фрагмент с двумя элементами `SafeAreaView`.",
          "Первый должен иметь стили: `flex`: `1`, `backgroundColor`: `colors.blue`.",
          "Второй: `flex`: `0`, `backgroundColor`: `colors.blue1`.",
          "Дальше все элементы будет добавлять внутри первого `SafeAreaView`.",
          "Первым будет компонент `NavigationHeader` со свойством `barStyle` равным `light`.",
          "После него добавь элемент `View` со стилями: `flex` - `0.5`, `paddingBottom` - `25`, `paddingLeft` - `20`.",
          "Назовем это `View` хедером. Внутри хедера добавь еще один `View` - инфо блок.",
          "Стили инфо блока - `flex`: `1`, `flexDirection`: `row`, `height`: `40`, `maxHeight`: `40`.",
          "Внутри инфо блока добавить два `View` (блок list и блок word) с двумя `Text` элементами в каждом (count и label).",
          "Стили блока list - `width` - `66`, `alignItems` - `center`, `justifyContent`: center`.",
          "Стили блока word - `width` - `81`, `alignItems` - `center`, `justifyContent`: `center`, `borderLeftWidth`: `2`, `borderColor`: `colors.white`.",
          "Стили первого текстового элемента каждого блок list и word: `fontSize` - `22`, `color` - `colors.white`, `fontFamily` - `RobotoBold`.",
          "Стили второго текстового элемента каждого блок list и word: `fontSize` - `12`, `color` - `colors.blue2`, `fontFamily` - `RobotoRegular`.",
          "Первый label должен отображать текст `Lists`, второй - `Words`.",
          "После хедера добавим тело экрана - элемент `View` со стилями: `flex` - `8`, `backgroundColor` - `colors.blue1`, `borderTopLeftRadius` - `15`, `borderTopRightRadius` - `15`.",
          "Первым дочерним элементом должен быть текст `My dictionary` со следующими стилями:",
          "`fontSize` - `20`, `color` - `colors.black`, `fontFamily` - `RobotoRegular`, `marginTop` - `26`, `marginLeft` - `16`.",
          "После этого текста должен идти элемент `FlatList` со стилем `marginVertical` - `21`.",
          "И после `FlatList` добавь компонент `RadialButton`."
        ],
        "8": [
          "Подключим redux и навигацию к нашему приложению",
          "Для этого импортируй компонент `src/components/Navigator` и `Provider` из `react-redux`.",
          "Теперь после того, как в компоненте `<App />` загрузятся шрифты - должен вернутся навигатор, обернутый провайдером.",
          "Провайдеру нужно указать свойство `store`, значение которого импортируй из `src/external/redux/store.js`.",
          "Теперь компонент `Lists` нужно подключить к хранилищу. Для этого в файле `src/containers/Lists.index` импортируй `connect` из `react-redux`.",
          "У метода `connect` должен быть только один аргумент - функцию `mapStateToProps`.",
          "`mapStateToProps` должна возвращать объект с тремя полями `lists`, `wordsCount`, `listsCount`.",
          "В функцию, возвращаемую методом `connect` передай компонент `Lists`.",
          "Поле `lists` должно содержать себе поле `LISTS` из состояния хранилища.",
          "Поля `wordsCount`, `listsCount` - длина массивов `WORDS` и `LISTS` из состояния хранилища.",
          "Текстовый элемент над текстом `Lists` в компоненте `Lists` должен отображать свойство `listsCount`.",
          "Текстовый элемент над текстом `Words` в компоненте `Lists` должен отображать свойство `wordsCount`."
        ],
        "9": [
          "Добавим оставшиеся экраны в навигатор. Всего их должно быть 4.",
          "Добавим экран с компонентом `Words` и именем `WORDS_SCREEN`.",
          "И еще добавь два экрана с компонентом `AddingListOrWord`.",
          "Один с именем `ADD_LIST_SCREEN`, а второй с именем `ADD_WORD_SCREEN`.",
          "Ну и добавим переход на экран `ADD_LIST_SCREEN`.",
          "На экране `Lists` при нажатии на `RadialButton` мы должны попасть на экран `ADD_LIST_SCREEN`."
        ],
        "10": [
          "Добавим компонент `src/components/Buttons/IconButton`.",
          "Возвращать этот компонент должен элемент `TouchableOpacity`.",
          "Стили этого компонента должны быть массивом стилей.",
          "Первый элемент массива должен содержать стиль `padding`, равный 3.",
          "Второй элемент массива - переданное свойство `style`, равное пустому объекту по умолчанию.",
          "Свойство onPress компонента должно быть проброшено в `TouchableOpacity`.",
          "Внутри `TouchableOpacity` добавь компонент `Icon`. Пробрось в него свойства `name`, `size` и `color`."
        ],
        "11": [
          "Добавим компонент `src/components/Input`.",
          "Возвращать этот компонент должен элемент `View`.",
          "Стили этого компонента должны быть массивом стилей.",
          "Первый элемент массива должен содержать следующие стили: `borderRadius` - `4`, `height` - `35`, `flex` - `1`,",
          "`paddingLeft` - `10`, `backgroundColor` - `colors.white`, `shadowOpacity` - `0.4`, `shadowRadius` - `3`,",
          "`shadowOffset` - `{ width: 0, height: 1 }`, `shadowColor` - `colors.black`, `elevation` - `3`, `borderWidth` - `0`.",
          "Второй элемент массива - переданное свойство `style`, равное пустому объекту по умолчанию.",
          "Внутри `TouchableOpacity` добавь элемент `TextInput` со следующими стилями:",
          "`flex` - `1`, `color` - `colors.black`, `justifyContent` - `center`, `fontFamily` - `RobotoRegular`, `fontSize` - `18`.",
          "Пробрось в `TextInput` свойства `placeholder`, `onChangeText` и `value`."
        ],
        "12": [
          "Добавим компонент `src/components/Buttons/Button`.",
          "Возвращать этот компонент должен элемент `TouchableOpacity` со стилями:",
          "`borderRadius` - `4`, `height` - `35`, `width` - `120`, `justifyContent` - `center`,",
          "`alignItems` - `center, `backgroundColor` - `colors.blue3`, `shadowOpacity` - `0.4`,",
          "`shadowRadius` - `3`, `shadowOffset` - `{width: 0, height: 1}`, `shadowColor` - `colors.blue`,",
          "`elevation` - `3`, `borderWidth` - `0`.",
          "Свойство onPress компонента должно быть проброшено в `TouchableOpacity`.",
          "Если свойство `loading` равняется `true` - внутри `TouchableOpacity` должен быть `ActivityIndicator`.",
          "У `ActivityIndicator` свойство `size` установи в `small`, а `color` - в `colors.blue`.",
          "Если свойство `loading` равняется `false` - внутри `TouchableOpacity` должен быть `Text`.",
          "`Text` должен отображать свойство `text`, с цветом `colors.blue`.",
          "`TouchableOpacity` должен быть отключен, когда `loading` - `true`."
        ],
        "13": [
          "Теперь добавим компонент, который будет элементом списка `Lists`.",
          "Добавим его в папке `src/containers/Lists/List`.",
          "Сначала добавим вспомогательный метод `getWordsCount` в файле `src/containers/Lists/List/helpers.js`.",
          "Это метод первым аргументом будет получать список слов, а вторым - имя списка.",
          "Возвращать он должен количество слов, у которых поле `listKey` равняется переданному имени списка.",
          "Компонент `List` должен возвращать `TouchableOpacity` со стилями: `backgroundColor` - `colors.white`,",
          "`flexDirection` - `row`, `height` - `55`, `borderRadius` - `5`, `marginVertical` - `7`, `marginHorizontal` - `16`,",
          "`paddingHorizontal` - 10, `shadowOpacity` - 0.4, `shadowRadius` - `3`, `shadowOffset` - `{width: 0, height: 1}`,",
          "`shadowColor` - `colors.black`, `elevation` - `3`, `borderWidth` - `0`.",
          "У `TouchableOpacity` должно быть два дочерних элемента `View` - левая и правая часть.",
          "Левая со стилями  `flex` - `8`, `justifyContent` - `center` и двумя дочерними элементами `Text`.",
          "Первый `Text` должен отображать свойство `listKey` со стилями: `fontSize` - `16`, `color` - `colors.black`, `fontFamily` - `RobotoRegular`.",
          "Второй `Text` должен отображать moment свойства `createAt` в формате `DD.MM.YYYY`. Стили: ",
          "`fontSize` - `10`, `color` - `colors.blackOpacity80`, `fontFamily` - `RobotoRegular`, `fontWeight` - `300`, `marginTop` - `4`.",
          "Стили правой части: `flex` - `8`, `flexDirection` - `row`, `justifyContent` - `flex-end`, `alignItems` - `center`,",
          "Первый элемент правой части - компонент `Icon` со свойствами `name` - `pencil` и `color` - `colors.blue`.",
          "Второй элемент правой части - текст, отображающий результат вызова `getWordsCount` со свойствами `words` и `listKey`.",
          "Стили этой части `fontSize` - `15`, `color` - `colors.blue`, `fontFamily` - `RobotoRegular`, `marginLeft` - `6`."
        ],
        "14": [
          "У элемента `FlatList` контейнера `Lists` должна быть определенны свойства `data` и `renderItem` для отображения элементов списка.",
          "Свойство `data` должно равняться свойству `lists` контейнера.",
          "А метод `renderItem` должен возвращать компонент `List` со свойствами: `createdAt` и `listKey`.",
          "Значения этих свойств - поля `key` и `createdAt` элемента списка.",
          "А в компоненте `List` добавим переход на экран `WORDS_SCREEN` при нажатии на `TouchableOpacity`.",
          "Вторым аргументов метода `navigation.navigate` в этом случае должно стать свойство `listKey` компонента."
        ],
        "15": [
          "Подключим компонент `List` к хранилищу.",
          "Нужно в компонент `List` передать только поле `WORDS`.",
          "Только при его передаче в компонент надо переименовать на `words`."
        ],
        "16": [
          "Поработаем над контейнером `AddingListOrWord`.",
          "На этом экране будет одно поле ввода, и введенное значение надо будет где-то хранить.",
          "Для этого используй `useState`.",
          "Сам контейнер `AddingListOrWord` должен возвращать `SafeAreaView` со стилями:",
          "`flex` - 1, `backgroundColor` - `colors.blue1`.",
          "Первым дочерним элементом у `AddingListOrWord` должен быть компонент `NavigationHeader`.",
          "Вторым дочерним элементом должен быть `View`. Это будет хедер.",
          "Стили хедера: `flexDirection` - `row`, `alignItems` - `center`, `marginTop`: `18`, `paddingLeft` - `12`.",
          "Внутри хедера должен быть компонент `IconButton` при нажатии которого будет вызываться метод `goBack`.",
          "Свойство `size` у `IconButton` должно быть `23`, `name` - `cancel-circle`.",
          "После `IconButton` должен быть заголовок, сделанный с помощью элемента `Text`. Его стили:",
          "`color`: `colors.black`, `fontSize`: `18`, `fontFamily`: `RobotoRegular`, `marginLeft`: `12`.",
          "Внутри заголовка должен быть текст `Add list` для экрана с именем `ADD_LIST_SCREEN`.",
          "Для экрана с именем `ADD_WORD_SCREEN` внутренний тест заголовка должен быть `Add word`.",
          "После заголовка добавь тело экрана - элемент `View` со стилем `flex`, равным `1`.",
          "Внутри него должен быть контейнер поля ввода - элемент `View` со стилями:",
          "`marginTop` - `29`, `paddingHorizontal` - `15`, `flexDirection` - `row`.",
          "Контейнер поля ввода состоит из двух элементов - компонента `Input` и компонента `Button`.",
          "Значение поля ввода должно равняться значения состояния, которые мы уже создали, и изменяться оно должно в свойстве onChangeText.",
          "`placeholder` у поля должен быть `enter list name` для `ADD_LIST_SCREEN` и `enter word name` для `ADD_WORD_SCREEN`.",
          "Свойство `autoFocus` поля ввода должно равняться `true`, а стили: `marginRight` - `14`.",
          "`text` компонента `Button` должен равняться `Add`, а свойство `loading` проброшено из свойств контейнера.",
          "Если у контейнера определенно свойство `error`, его надо отобразить внутри элемента `Text` после тела экрана.",
          "Его стили: `color` - `colors.red`, `fontFamily` - `RobotoBold`, `fontSize` - `14`, `textAlign` - `center`, `marginTop` - `33`."
        ],
        "17": [
          "Проработаем контейнер `Words`, который должен возвращать два `SafeAreaView` элементами.",
          "Первый со стилями: `flex` - `1`, `backgroundColor` - `colors.blue1`, а второй: `flex` - `0`, `backgroundColor` - `colors.blue1`.",
          "Дальше все элементы будут добавляться в первый `SafeAreaView`.",
          "Сначала добавим `NavigationHeader`. После него хедер - `View` с двумя дочерними `TouchableOpacity` - кнопками назад и удалить.",
          "Стили хедера:  `backgroundColor` - `colors.blue1`, `height` - `50`, `flexDirection` - `row`, `justifyContent` - `space-between`,",
          "`alignItems` - `center`, `paddingHorizontal` - `26`.",
          "Стили кнопки назад: `flex` - `8`, `flexDirection` - `row`, `alignItems` - `center`. При нажатии на нее должен срабатывать метод `navigation.goBack`.",
          "Стили кнопки удалить: `flex` - `2`, `justifyContent` - `center`, `alignItems`: `flex-end`.",
          "Внутри кнопки назад добавь компонент `Icon` со свойствами  `color` - `colors.black`, `size` - `20` и `name` - `left-open-big`.",
          "После иконки должен быть текст `route.params` со стилями: `fontSize` - `18`,",
          "`color` - `colors.black`, `fontFamily`: `RobotoRegular`, `marginLeft`: `14`.",
          "Внутри кнопки удалить добавь компонент `Icon` со свойствами `color` `colors.black`, `size` `20` и `name` `trash`.",
          "После хедера добавь элемент `FlatList`, `keyExtractor` которого будет возвращать свойство `wordset_id` элемента.",
          "После списка добавь компонент `RadialButton`, при нажатии на который будет происходить переход на экран `ADD_WORD_SCREEN`.",
          "При переходе нужно передать параметр `listKey`, равный `route.params`."
        ],
        "18": [
          "Поработаем над методами redux. Но сначала добавим нужные константы в файл `src/external/redux/constants`.",
          "`API`, `FETCH_WORD_ENDPOINT`, `ADD_WORD`, `SET_ERROR`, `SET_LOADING` - значение всех констант равняется их имени.",
          "А потом добавь экспорт функции `getFetchWordEndpoint` в файл `src/external/redux/helpers`.",
          "Эта функция должна получать один аргумент - слово для поиска.",
          "Возвращать она будет url запроса, который состоит из константы `API` и `FETCH_WORD_ENDPOINT`.",
          "К этим двум переменным нужно добавить get параметр `s`, равный аргументу функции",
          "Экспортируй из файла `src/external/redux/actions` еще три функции: `addWord`, `setError` и `setLoading`.",
          "Возвращать каждая должна объект с полями `type` и `payload`.",
          "Поле `type` равняется константам `ADD_WORD`, `SET_ERROR` и `SET_LOADING` соответственно.",
          "У функций `setError` и `setLoading` `payload` равняется единственному аргументу каждой функции соответственно.",
          "У функции `addWord` `payload` всем полям первого аргумента, дополненного полем `listKey`, равное второму аргументу функции."
        ],
        "19": [
          "Данные надо где-то хранить. Для этого давай использовать библиотеку `@react-native-async-storage/async-storage`.",
          "Напишем две функции для сохранения и чтения данных в файле `functions.js` в корне проекта.",
          "Назовем эти функции `setStorage` для сохранения и `readStorage` для чтения.",
          "`setStorage` получает два аргумента - ключ данных и сами данные.",
          "Данные в `async-storage` должны сохраняться в виде JSON строки под переданным ключом с помощью метода `setItem`.",
          "`readStorage` должен читать метода из `async-storage` по переданному ему ключу с помощью метода `getItem`.",
          "Если данных нет - давай возвращать `null`.",
          "Не забывай - оба метода должны быть асинхронными и дожидаться выполнения `setItem` или `getItem`."
        ],
        "20": [
          "Добавим нужные константы в файл `src/external/redux/constants`.",
          "`DELETE_LIST`, `DELETE_WORD` - значение всех констант равняется их имени.",
          "Экспортируй из файла `src/external/redux/actions` еще две функции: `deleteWord`, `deleteList` и `setLoading`.",
          "Возвращать каждая должна объект с полями `type` и `payload`.",
          "Поле `type` равняется константам `DELETE_WORD` и `DELETE_LIST` соответственно.",
          "`payload` равняется единственному аргументу каждой функции соответственно.",
          "Там же добавим метод запроса `fetchWord` с тремя аргументами: слово для поиска, `listKey` и объект `navigation`.",
          "Этот метод должен возвращать асинхронную функцию с одним аргументом `dispatch`.",
          "Сначала диспачим экшн для поля `loading` со значением `true`.",
          "Потом делаем запрос с помощью fetch, url которого получаем из метода `getFetchWordEndpoint`.",
          "Если ответ без ошибки - диспачим экшн addWord с резальтом ответа и `listKey`, диспачим `setError` с аргументом `null` и вызываем метод `navigation.goBack`.",
          "Если ответ с ошибкой - диспачим экшн `setError` с этой ошибкой.",
          "Всегда в конце диспачим `setLoading` со значением `false`."
        ],
        "21": [
          "Добавь константу `SET_STORAGE_DATA` в `src/external/redux/constants`, равную ее же имени.",
          "Добавь `readAsyncStorage` функцию в файл `src/external/redux/actions` и экспортируй ее.",
          "Этот метод должен возвращать асинхронную функцию с одним аргументом `dispatch`.",
          "В замыкании сначала читаем с помощью `readStorage` данные для ключей `LISTS` и `WORDS`.",
          "Потом надо задиспачит экшн с `SET_STORAGE_DATA` `type`.",
          "`payload` должен быть объектом с полями `LISTS` и `WORDS`, равные прочтенным данным.",
          "Если каких-то данных нет - указываем пустой массив."
        ],
        "22": [
          "Функции `deleteListResult`, `deleteWordResult`, `addListResult`, `addWordResult` должны быть экспортированы из `src/external/redux/helpers`.",
          "`deleteListResult` должен получать в качестве аргументов состояние и список для удаления.",
          "Этот метод должен возвращать обновленное состояние, отфильтровав списки `LISTS` и `WORDS`.",
          "`LISTS` должен быть отфильтрован по полю `key` элемента, `WORDS` - по `listKey`.",
          "`deleteWordResult` должен получать в качестве аргументов состояние и слово для удаления.",
          "Этот метод должен возвращать обновленное состояние, отфильтровав список `WORDS` по полю `word`.",
          "`addListResult` должен получать в качестве аргументов состояние и список для добавления.",
          "Если список уже существует, надо обновить только поле ошибки - `There is already a list with this name`.",
          "Если имени списка нет или это пустая строка - ошибка `List name is empty`.",
          "Метод `addWordResult` должен получать в качестве аргументов состояние и объект слова для добавления.",
          "Если слово в поле `word` уже есть в списке - ошибка `This word is already there`.",
          "Надо также обновить значение `LISTS` и `WORDS` в Async Storage для каждого изменения."
        ],
        "23": [
          "Доработаем reducer. По умолчанию он должен возвращать начальное состояние.",
          "Случай `ADD_LIST` должен вызывать метод `addListResult`, случай `ADD_WORD`: `addWordResult`.",
          "Случаи `DELETE_LIST` и `DELETE_WORD` - методы `deleteListResult` и `deleteWordResult` соответственно.",
          "При этом всегда нужно возвращать результат вызова метода с соответствующими аргументами.",
          "Случаи `SET_ERROR` и `SET_LOADING` должны переданный `payload` сохранять в поля `error` и `loading` соответственно.",
          "При `SET_STORAGE_DATA` нужно payload вмержить в копию состояния."
        ],
        "24": [
          "Нужно создать папки: `src/containers/Words/Word`, `src/containers/Words/Word/Details`, `src/containers/Words/Word/Option`.",
          "В каждой из низ нужен `index.js` файл для создания соответствующих компонентов.",
          "Начнем с компонента `Option`. Он должен возвращать элемент `Text`.",
          "Если свойство `detailsKey` не равно `examples` или `defs`: ",
          "- стили элемента: `fontSize` - `14`, `color` - `colors.black`, `fontFamily` - `RobotoRegular`, `textDecorationLine`: `underline`;",
          "внутренний текст - свойство `option` компонента;",
          "в конце внутреннего теста `, `, если свойство `lastOption` не равняется `true`.",
          "",
          "В другом случае логика отображения будет несколько другой.",
          "Для этого в папке `Option` создай файл `helpers.js` и экспортируй из него функцию `optionTransform`.",
          "Эта функция принимает два аргумента: строк `option` и `word`. `option` должна быть разбита на массив.",
          "Разбиение должно быть таким образом, что бы каждое вхождение `word` в `option` было отдельным элементом.",
          "После надо каждое вхождение `word` в этом массиве обернуть элементом `Text` с `fontFamily` - `RobotoBold`",
          "",
          "Если свойство `detailsKey` равно `examples` или `defs`: ",
          "- стили элемента: `fontSize` - `14`, `color` - `colors.black`, `fontFamily` - `RobotoRegular`;",
          "- внутренний текст - результат вызова `optionTransform` со свойствами `option` и `word`;",
          "- перед внутренним текстом нужно добавить `- `."
        ],
        "25": [
          "Теперь поработаем над компонентом `Details`. Он должен возвращать элемент `View`.",
          "У `View` свойство `marginVertical` должно равняться `10`.",
          "Внутри `View` сначала добавим элемент `Text`: для значения `detailsKey` `defs` - внутренний текст `Definition:`,",
          "для значения `examples` - `Example:`, для значения `synonyms` - `Synonyms:`.",
          "Стили текста: `fontSize` - `14`, `color` - `colors.black`, `fontFamily` - `RobotoBold`.",
          "После текста должен быть элемент `View`.",
          "Для `detailsKey`, равному `synonyms`, у этого `View` элементы должны отображаться в строчку с переносом на новую строку.",
          "Внутри этого элемента надо отобразить массив `options`. Для каждого элемента показать компонент `Option`.",
          "Каждому `Option` компоненту надо передать свойство `option`, равное текущему элементу.",
          "Также в каждый `Option` надо пробросить `word` and `detailsKey` свойства.",
          "`lastOption` свойство `Option` должно быть `true` для последнего элемента в массиве `options`."
        ],
        "26": [
          "Теперь время проработать компонент `Word`. В нем будут разворачиваться и сворачиваться детали.",
          "Для этого добавим флаг с использованием хука `useState`. Начальное значение - `false`.",
          "",
          "Компонент `Word` должен возвращать элемент `View`, внутри которого будет `TouchableOpacity` со стилями:",
          "`height` - 53, `flexDirection` - `row`, `justifyContent` - `space-between`, `alignItems`: `center`, `marginVertical`: `7`,",
          "`backgroundColor`: `colors.white`, `borderRadius`: `5`, `paddingHorizontal`: `17`, `borderWidth`: `0`, `shadowOpacity`: `0.4`,",
          "`shadowOffset`: `{ width: 0, height: 1 }`, `shadowColor`: `colors.black`, `elevation`: `3`, , `marginHorizontal`: `16`, `shadowRadius`: 3,",
          "При нажатии на `TouchableOpacity` флаг должен переключаться в противоположное значение",
          "",
          "Первым дочерним элементом `TouchableOpacity` должен быть `Text`, выводящий свойство `word`.",
          "Его стили: `fontSize` - `16`, `color` - `colors.blackOpacity80`, `fontFamily` - `RobotoRegular`.",
          "",
          "Вторым дочерним элементом `TouchableOpacity` должен быть контейнер иконок `View`.",
          "Его стили: `flexDirection` - `row`, `justifyContent` - `space-between`, `alignItems` - `center`.",
          "Группа иконок состоит из двух компонентов `IconButton` со свойствами `size` - `20`, `color` - `colors.blue` and `style.marginLeft` - `19`",
          "",
          "При нажатии на первую флаг должен переключаться в противоположное значение",
          "Если флаг равен `true` - `name` первой `IconButton` должен быть `up-open-big`, иначе - `down-open-big`",
          "",
          "Второй `IconButton` должен иметь свойство `name` `trash`.",
          "Свойство `dispatchDeleteWord` должно быть проброшено в `onPress` второй `IconButton`.",
          "Мы его подключим в следующих шагах.",
          "",
          "После `TouchableOpacity` надо показать `View` если флаг равен `true`.",
          "Тут будем показывать детали слова. `marginHorizontal` должен равняться `33`."
        ],
        "27": [
          "Для отображения данные надо сначала подготовить.",
          "Для этого экспортируй функцию `preparedDetails` из файла: `src/containers/Words/Word/helpers.js`.",
          "",
          "Получать эта функция должна один аргумент `meanings`.",
          "`meanings` это массив объектов, которые описывают слово.",
          "Каждый объект состоит из строк `def`, `example` и массива строк `synonyms`.",
          "",
          "Получая такой массив, функция `preparedDetails` должна возвращать объект с полями: `defs`, `examples`, `synonyms`.",
          "`defs` должен быть массивом значений полей `def` всех элементов `meanings`.",
          "`examples` должен быть массивом значений полей `example` всех элементов `meanings`.",
          "`synonyms` должен объединить массивы synonyms всех элементов `meanings`.",
          "Значения `defs`, `examples` и `synonyms` должны содержать только уникальные значения.",
          "",
          "Контейнер деталей в компоненте `Word` должен отображать массив полей `preparedDetails`.",
          "Этот метод надо вызывать со свойством meanings компонента `Word`.",
          "Для каждого ключа должен рендерится компонент `Details`, свойство `keyDetail` которого равняется текущему ключу.",
          "Свойство `options` должно равняться значению этого ключа в объекта, полученном из `preparedDetails`.",
          "Также должно быть проброшено свойство `word`.",
          "",
          "В контейнере `Words` укажи свойство `data` для `FlatList`.",
          "Оно должно равняться отфильтрованому свойству `words`.",
          "Должны остаться только те элементы, свойство `listKey` которых равно `route.param` контейнера."
        ],
        "28": [
          "Нам надо добавить еще один, на этот раз последний, компонент.",
          "Создадим его в папке `src/components/AlertModal`.",
          "Возвращать этот компонент должен элемент `Modal`.",
          "Свойство `visible` должно быть проброшено в него, а свойство `handleClose` в его свойство `onRequestClose`.",
          "Появляться модальное окно должно снизу вверх, а задний фон должен быть прозрачен.",
          "",
          "Внутри элемента `Modal` добавь элемент `Pressable` со стилями:",
          "`flex` - `1`, `alignItems`: `center`, `justifyContent` - `center`.",
          "Свойство `handleClose` надо пробросить в его свойство `onPress`.",
          "",
          "Внутри `Pressable` должен быть только один элемент `View` со стилями:",
          "`alignItems` - `center`, `backgroundColor` - `colors.white`, `borderRadius`- 5,",
          "`elevation` - `5`, `margin` - `20`, `padding` - `35`, `shadowColor` - `colors.black`,",
          "`shadowOffset` - `{width: 0, height: 2}`, `shadowOpacity` - `0.25`, `shadowRadius` - `3.84`.",
          "",
          "Внутри этого `View` надо добавить еще один `View` - контейнер кнопки закрытия.",
          "Ее стили: `position` - `absolute`, `width` - `50`, `height` - `50`, `top` - `-15`,",
          "`right` - `-15`, `justifyContent` - `center`, `alignItems` - `center`.",
          "Внутри этого `View` только одни компонент `IconButton` со свойтвами:",
          "`color` - `colors.blue`, `name` - `cancel-circle`, `size` - `35`",
          "Свойство `handleClose` надо пробросить в его свойство `onPress`.",
          "",
          "После контейнер кнопки закрытия надо добавить заголовок `Text`.",
          "Свойство `title` должно быть внутри этого текста. Его стили:",
          "`fontSize` - `18`, `color` - `colors.black`, `fontFamily` - `RobotoRegular`,",
          "`marginBottom` - `15`, `textAlign` - `center`.",
          "",
          "Под заголовком добавь `TouchableOpacity` с текстом `Delete`.",
          "Стили кнопки: `backgroundColor` - `colors.blue`, `borderRadius`: `5`, `elevation`: `2`, `padding`: `10`.",
          "Стили текста: `fontSize` - `17`, `color` - `colors.white`, `fontFamily` - `RobotoBold`, `textTransform` - `uppercase`, `textAlign`: `center`.",
          "Свойство `handleDeleteClick` должно быть проброшено в метод `onPress` этого `TouchableOpacity`."
        ],
        "29": [
          "Добавим модальное окно в контейнер `Words`.",
          "Сначала добавим логику его включения.",
          "Создадим его состояние с помощью `useState`. Начальное значение это объект с полями:",
          "`visible` со значением `false`, `title` - пустая строка, `handleDelete` - null.",
          "Дальше добавим метод `getVisibleModalData` в файле: `src/containers/Words/helpers.js`.",
          "",
          "У метода должно быть три аргумента: `name`, `deleteHandler`, `setModalParams`.",
          "Последний - метод из вызванного выше `useState`.",
          "Эта функции должна вызывать метод `setModalParams` и передавать в него объект с полями:",
          "- `visible`, равное `true`;",
          "- `title`, равное `Are you sure you want to delete \"${name}\"?`, где name - аргумент, описанный выше",
          "- `handleDelete`, равное функции, которая сначала вызывает `deleteHandler` с аргументом `name`, а потом `setModalParams` с начальным значение `useState`.",
          "",
          "Сам компонент `AlertModal` должен быть добавлен после `RadialButton`.",
          "Свойства `visible`, `title`, `handleDeleteClick` должны быть взяты из объекта состояния выше.",
          "Свойство `handleClose` должно устанавливать начальное значение `useState`."
        ],
        "30": [
          "Контейнер `Words` нужно подключить к хранилищу с помощью метода `connect`.",
          "Будем использовать и `mapStateToProps`, и `mapDispatchToProps`.",
          "`mapStateToProps` должен возвращать только одно свойство `words`, равное `WORDS` из состояния.",
          "`mapDispatchToProps` должен быть объектом со свойствами: `dispatchDeleteList` и `dispatchDeleteWord`.",
          "Первое равняется методу `deleteList`, второе - `deleteWord`.",
          "",
          "Второй `TouchableOpacity` в контейнере `Words` должен показывать модальное окно.",
          "Используй метод `getVisibleModalData` для этого.",
          "Первый аргумент - `route.params`",
          "Второй аргумент должен удалять переданный список с помощью свойства `dispatchDeleteList` и потом переходить на экран `LISTS_SCREEN`.",
          "Третий аргумент - метод из `useState`.",
          "",
          "У `FlatList` должно быть свойство `renderItem`, возвращающее компонент `Word`.",
          "Свойство `item` аргумента `renderItem` просто разложи в свойства компонента `Word`.",
          "Свойство `dispatchDeleteWord` у компонента `Word` должно быть функцией вызывающей `getVisibleModalData`.",
          "Первый аргумент -  свойство `item.word` аргумента `renderItem`.",
          "Второй `dispatchDeleteWord` из свойств `Words`.",
          "Третий аргумент - метод из `useState`."
        ],
        "31": [
          "Контейнер `AddingListOrWord` нужно подключить к хранилищу с помощью метода `connect`.",
          "Будем использовать и `mapStateToProps`, и `mapDispatchToProps`.",
          "`mapStateToProps` должен возвращать два свойство `loading` и `error` из состояния.",
          "`mapDispatchToProps` должен возвращать объект с тремя свойствами: `dispatchAddList`, `dispatchFetchWord`, `dispatchClearError`.",
          "Их значения `addList`, `fetchWord` и `setError` соответственно.",
          "",
          "При нажатии на кнопку `Add` должно очищаться значение поля ввода.",
          "При нажатии на кнопку `Add` для экрана `ADD_WORD_SCREEN` должен вызываться метод `dispatchFetchWord`.",
          "При этом его первым аргументом должно быть значение поля ввода до очистки, с удаленными пробелами по краям в нижнем регистре.",
          "Не забудь передать второй и третий аргументы: `route.params.listKey` и `navigation`.",
          "",
          "При нажатии на кнопку `Add` для экрана `ADD_LIST_SCREEN`, вызови метод `dispatchAddList`.",
          "При этом его единственным аргументом должно быть значение поля ввода до очистки, с удаленными пробелами по краям.",
          "",
          "При вводе текста в поле должен вызываться метод `dispatchClearError` с аргументом `null`.",
          "При этом все остальное должно работать как раньше.",
          "Также этот метод с этим же значение должен вызываться при нажатии на кнопку назад (иконка cancel).",
          "После очистки вызови метод `navigation.goBack()`."
        ],
        "32": [
          "Последний штрих - загрузка данных между включениями.",
          "В файле `App.js` перед загрузкой шрифтов добавь вызов метода `store.dispatch`.",
          "`store` мы импортировали ранее и передавали ее в провайдер.",
          "Единственным аргументом метода `store.dispatch` будет вызов метода `readAsyncStorage`."
        ]
      },
      "final": [
        "Это был долгий путь, но ты его преодолел. Можешь гордится собой!"
      ]
    }
  }
}
